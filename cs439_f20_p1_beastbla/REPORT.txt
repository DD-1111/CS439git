
- For each file in the kernel directory:
    - what abstractions does it introduce (if it does)
    - what resources does it manage (if it does)
atomic introduces abstraction of memory and it manages the memory because it provide operations that change values in memory
config introduces abstraction of process and manages processor
critical introduces abstraction of process 
debug introduces file and manages I/O bus
idt deals with exceptions and manages processor 
init introduces process and manage disks
io introduces file and manage I/O bus
kernel.h seems like a simple header file only
libk is the basic library, introduces files
machine manages processor and disks and memory
mbr manages processor
script.ld is a linking file, introduces file and manages memory or disks
smp manages processors and I/O bus
snprintf introduces file and manage memory, disk and I/O bus
sudint.h defines some basic types
u8250 manages I/O

- What is the MBR?
MBR, master boot record, is the first sector read in the disk after bootstrap. 
The BIOS will jump to the self-checking program to check the partition table and hardwares and find for MBR,
MBR will load the boot program on the hard disk and finish other boot steps left.

- Explain the relationship between kernel/kernel.cc and t0.cc?
kernel is just a header file of the kernelMain function in different tests. Tests like t0.cc tells the system what to do.
The system receive the tasks and try to do what it can to finish them and give outputs in the form of printed text as side production.


- Look at the output from running "make clean all" and try to classify the
  commands that it issues (gcc, ld, dd, rm, ...). For each of them:

     * explain what it does
     * explain the purpose of the command line arguments generated by the Makefile

     Limit your explanation to one line per command/argument.


        - rm: removes one or more files or directories
        - "-r": do it recursively
        - "-f": directly delete, no need to confirm one by one
        - g++: compiler, use c++ but not c by default
        - "-c": create object file
        - "-MD": produce the linking information and output into .d file
        - "std=c++17": use c++17 as language standard
        - "-fno-exceptions": Invalidate the keywords exceptions
        - "-fno-rtti": prohibit to determine the type of data in runtime
        - "-m32": generate code for 32-bit environment 
        - "ffreestanding": standard library may not exist
        - "nostdlib": no standard system library
        - "-g": produce debug log while compiling 
        - "-o3": optimization to produce more machine code
        - "-Wall": enable a set of warning
        - "-Werror": every warning is treated as an error.
        - ld: bind input files into one object file
        - "-e": point out the input file symbol
        - "-o": name the output file as ...
        - objcopy: generate a raw binary file by using an output target of Â· binary 
        - "-O": output name 
        - dd: reads from standard input and writes to standard output
        - "if": input file
        - "of": output file
        - "bs": block size
        - "dev/null": will return null

 
---------------------------------------------------------------

Cite your resource:

- https://medium.com/@akhandmishra/operating-system-introduction-ba5bb9c438bc

- https://en.wikipedia.org/wiki/Interrupt_descriptor_table

- https://wiki.osdev.org/MADT

- http://www.personal.kent.edu/~rmuhamma/OpSystems/Myos/osIntro.htm

- https://sourceware.org/binutils/docs/ld/Scripts.html

- https://searchdatacenter.techtarget.com/definition/SMP

- https://en.wikipedia.org/wiki/Master_boot_record

- https://www.geeksforgeeks.org/g-fact-33/

- https://blog.csdn.net/woshinia/article/details/11060797

- https://gcc.gnu.org/onlinedocs/gcc/x86-Options.html#x86-Options

- https://stackoverflow.com/questions/17692428/what-is-ffreestanding-option-in-gcc

- https://stackoverflow.com/questions/29254877/meaning-of-g-flags-wall-w-werror

- https://wangchujiang.com/linux-command/c/dd.html

- https://linuxconfig.org/how-dd-command-works-in-linux-with-examples

- https://linux.die.net/man/1/objcopy
